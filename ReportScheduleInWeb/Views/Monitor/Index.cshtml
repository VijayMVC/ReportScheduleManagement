@model ReportScheduleInWeb.Models.WishViewModel
@{
    ReportScheduleInWeb.Models.TaskViewModel taskModel = null;
    ReportScheduleInWeb.Models.ParameterType parameterModel = null;
}

@{
    ViewBag.Title = "Мониторинг";
    Layout = "~/Views/Shared/_Layout.cshtml";
    var db = new ReportScheduleInWeb.Models.ReportScheduleEntities();
}

<div class="row align-items-center">
    <div class="col-12">
        <p class="display-4" style="color: #663333 !important">Мониторинг</p>
    </div>
</div>

<input type="hidden" id="busy_page" />

<nav class="navbar navbar-dark bg-dark card" style="min-width:645px">
    <form id="form" style="width:100%">
        <fieldset id="SubmitForm">
            <div class="row container-fluid">
                <div class="col-xl-4 input-group mb-2">
                    <div class="input-group-prepend">
                        <span class="input-group-text bg-dark text-white">Заказчик:</span>
                    </div>
                    @Html.DropDownList("search_user_id", (SelectList)ViewBag.Authors, "Не выбрано", new { @class = "custom-select" })
                </div>
                <div class="col-xl-4 input-group mb-2">
                    <div class="input-group-prepend">
                        <span class="input-group-text bg-dark text-white">Отчет:</span>
                    </div>
                    @Html.DropDownList("search_report_type_id", new SelectList(from rt in db.Report_types join rgr in db.Report_group_relation on rt.report_type_id equals rgr.rgr_report_id join rg in db.Report_groups on rgr.rgr_report_group_id equals rg.report_group_id select new { Report_type_id = rt.report_type_id, Report_type_name = rt.report_type_name, Report_group_name = rg.report_group_name }, "Report_type_id", "Report_type_name", "Report_group_name", 1), "Не выбрано", new { @class = "custom-select form-control" })
                </div>
                <div class="col-xl-4 input-group mb-2">
                    <div class="input-group-prepend">
                        <span class="input-group-text bg-dark text-white">Статус:</span>
                    </div>
                    @Html.DropDownList("search_status", new SelectList(ViewBag.Statuses, "Value", "Text"), "Не выбрано", new { @class = "custom-select" })
                </div>
            </div>
            <div class="row container-fluid">
                <div class="col-12 input-group mb-2">
                    <div class="input-group-prepend">
                        <span class="input-group-text bg-dark text-white">Места:</span>
                    </div>
                    @Html.DropDownList("search_places", new SelectList(from p in db.Places join ptr in db.Place_type_relation on p.place_id equals ptr.ptr_place_id join pt in db.Place_types on ptr.ptr_place_type_id equals pt.placetype_id select new { place_id = p.place_id, place_name = p.place_name, placetype_name = pt.placetype_name }, "place_id", "place_name", "placetype_name", 0), new { @class = "form-control chosen-select", @multiple = "true" })
                </div>
            </div>
            <div class="row container-fluid">
                <div class="col-xl-4 input-group mb-2">
                    <div class="input-group-prepend">
                        <span class="input-group-text bg-dark text-white">Создано от:</span>
                    </div>
                    <input type="date" value="" id="search_startdate" name="search_startdate">
                </div>
                <div class="col-xl-4 input-group mb-2">
                    <div class="input-group-prepend">
                        <span class="input-group-text bg-dark text-white">Создано до:</span>
                    </div>
                    <input type="date" value="" id="search_enddate" name="search_enddate">
                </div>
                <div class="col-xl-4 input-group mb-2">
                    <button class="btn btn-outline-success my-2 my-sm-0 container-fluid mr-1" type="button" onclick="ClickSearch()">Искать</button>
                    <button class="btn btn-outline-danger my-2 my-sm-0 container-fluid ml-1" type="button" onclick="ClearSearch()">Очистить</button>
                </div>
            </div>
        </fieldset>
    </form>
</nav>

<div class="card mt-3 bg-dark p-3" id="found_field" style="min-width:645px">
    <p class="h4 text-white pb-2">Найденные задания</p>
    <div class="pb-3">
        <table class="table table-bordered table-hover table-striped table-light">
            <tr class="bg-secondary" style="text-align:center">
                <th scope="col" style="width:150px; min-width:150px">
                    @Html.DisplayNameFor(m => Model.Wish_createdate).ToString()
                </th>
                <th scope="col">
                    @Html.DisplayNameFor(m => Model.Wish_report_type_name).ToString()
                </th>
                <th scope="col" style="width:150px; min-width:150px">
                    @Html.DisplayNameFor(m => Model.User_id).ToString()
                </th>
                <th scope="col" style="width:150px; min-width:160px">
                    @Html.DisplayNameFor(m => Model.Wish_status).ToString()
                </th>
            </tr>
            <tbody class="table-wish" id="FoundWishesList"></tbody>
        </table>
    </div>
</div>

<div class="modal fade" id="found_tasks" tabindex="-1" role="dialog" data-backdrop="static">
    <div class="vertical-alignment-helper">
        <div class="modal-dialog vertical-align-top modal-lg">
            <div class="modal-content bg-dark" id="mainContent" style="min-width:800px;">
                <div class="modal-header">
                    <h4 class="modal-title text-white">Задачи</h4>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <input type="hidden" id="wish_id" />
                    <input type="hidden" id="user_id" />
                    <div class="row">
                        <div class="col-3">
                            <label class="text-warning h6">Дедлайн:</label>
                        </div>
                        <div class="col-6">
                            <label class="text-light" id="labelDeadlineReport"></label>
                        </div>
                        <div class="col-3">
                            <button class="btn btn-outline-success my-2 my-sm-0 container-fluid mr-1" type="button" onclick="GetExcel(0)" id="GetExcelButton">Скачать Excel</button>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-3">
                            <label class="text-warning h6">Максимум попыток:</label>
                        </div>
                        <div class="col-9">
                            <label class="text-light" id="labelAttemptsReport"></label>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-3">
                            <label class="text-warning h6">Параметры:</label>
                        </div>
                        <div class="col-6">
                            <label class="text-light" id="labelParameterReport"></label>
                        </div>
                        <div class="col-3">
                            <button class="btn btn-outline-primary my-2 my-sm-0 container-fluid mr-1" type="button" onclick="UpdateInfo()" id="UpdateButton">Обновить</button>
                        </div>
                    </div>
                    <div class="row access">
                        <div class="col-3">
                            <label class="text-warning h6">Доступы:</label>
                        </div>
                        <div class="col-6">
                            <select class="custom-select form-control" id="access_type" name="access_type">
                                <option value="0">Для всех</option>
                                <option value="1">Из настроек отчета</option>
                                <option value="2">Выбранные пользователи</option>
                            </select>
                        </div>
                        <div class="col-3">
                            <button class="btn btn-outline-warning my-2 my-sm-0 container-fluid mr-1" type="button" onclick="SetAccess()" id="SetAccessButton">Изменить доступ</button>
                        </div>
                    </div>
                    <div class="row mt-2 access" id="access_area" style="display:none">
                        <div class="col-3">
                            <label class="text-warning h6">Пользователи:</label>
                        </div>
                        <div class="col-6">
                            @Html.DropDownList("access_users", (SelectList)ViewBag.Wish_users, new { @class = "form-control chosen-select chosen-select-users", @multiple = "true" })
                        </div>
                        <div class="col-3 input-group">
                            <input value="Все" class="btn btn-outline-info mr-4" type="button" onclick="AddUsersInSelect(0)">
                            <input value="Очистить" class="btn btn-outline-danger" type="button" onclick="AddUsersInSelect(-1)">
                        </div>
                    </div>
                    <div class="row mt-2">
                        <div class="col-4">
                            <button class="btn btn-outline-danger container-fluid" type="button" onclick="EndWish()" id="EndButton">Завершить досрочно</button>
                            <button class="btn btn-outline-primary container-fluid" type="button" onclick="RepeatWish()" id="RepeatButton">Повторить задание</button>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <table class="table table-bordered table-hover table-striped table-light">
                        <tr class="bg-secondary" style="text-align:center">
                            <th scope="col" style="width:150px; min-width:150px">
                                @Html.DisplayNameFor(t => taskModel.Task_place_name).ToString()
                            </th>
                            <th scope="col" style="width:150px; min-width:150px">
                                @Html.DisplayNameFor(t => taskModel.Task_startdate).ToString()
                            </th>
                            <th scope="col" style="width:150px; min-width:150px">
                                @Html.DisplayNameFor(t => taskModel.Task_number_attempts).ToString()
                            </th>
                            <th scope="col" style="width:150px; min-width:150px">
                                @Html.DisplayNameFor(t => taskModel.Task_status).ToString()
                            </th>
                            <th scope="col" style="width:150px; min-width:150px">
                                @Html.DisplayNameFor(t => taskModel.Task_last_error_text).ToString()
                            </th>
                        </tr>
                        <tbody class="table-task" id="FoundTasksList"></tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="repeat_tasks" tabindex="-1" role="dialog" data-backdrop="static">
    <div class="vertical-alignment-helper">
        <div class="modal-dialog vertical-align-top modal-lg">
            <div class="modal-content bg-dark" id="mainContent" style="min-width:800px;">
                <div class="modal-header">
                    <h4 class="modal-title text-white">Повторить задание</h4>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <div class="row align-items-center pb-2">
                        <div class="col-12 input-group mb-2">
                            <select class="custom-select form-control" id="repeat_type" name="repeat_type">
                                <option value="0">не создавать новое задание</option>
                                <option value="1">сделать копию задания</option>
                            </select>
                        </div>
                    </div>
                    <div class="row align-items-center pb-2">
                        <div class="col-12 input-group mb-2">
                            <div class="custom-control custom-checkbox pb-3">
                                <input type="checkbox" class="custom-control-input" id="customCheck">
                                <label class="custom-control-label text-white" for="customCheck">- только неудачи</label>
                            </div>
                        </div>
                    </div>
                    <div class="row align-items-center pb-2 repeat">
                        <div class="col-12 input-group mb-2">
                            <table class="table table-bordered table-hover table-striped table-light">
                                <tr class="bg-secondary" style="text-align:center">
                                    <th scope="col">
                                        @Html.DisplayNameFor(p => parameterModel.Alias).ToString()
                                    </th>
                                    <th scope="col">
                                        @Html.DisplayNameFor(p => parameterModel.Type).ToString()
                                    </th>
                                    <th scope="col">
                                        @Html.DisplayNameFor(p => parameterModel.Value).ToString()
                                    </th>
                                </tr>
                                <tbody id="SetParameterList"></tbody>
                            </table>
                        </div>
                    </div>
                    <div class="row pb-3">
                        <div class="col-4 text-right">
                            <div class="custom-control custom-switch">
                                <input type="checkbox" class="custom-control-input" id="customSwitch" checked>
                                <label class="custom-control-label text-white" for="customSwitch">- общий запуск</label>
                            </div>
                        </div>
                        <div class="col-5">
                            <input type='datetime-local' class='startdateValue' id="startdateValue" required>
                        </div>
                        <div class="col-3">
                            <input value="Установить всем" class="btn btn-sm btn-info" type="button" onclick="SetStartDateForAll()" id="startdateButton">
                        </div>
                    </div>
                    <div class="row pb-3">
                        <div class="col-4 text-right">
                            <label class="text-white">Дедлайн</label>
                        </div>
                        <div class="col-5">
                            <input type='datetime-local' class='deadlineValue' id="deadlineValue" required>
                        </div>
                        <div class="col-3">
                            &nbsp;
                        </div>
                    </div>
                    <div class="row pb-3">
                        <div class="col-4 text-right">
                            <label class="text-white">Количество попыток</label>
                        </div>
                        <div class="col-5">
                            <input type='number' class='attemptsValue' id="attemptsValue" min="0" max="99" title="Введите количество попыток, максимум = 99. Можно не заполнять.">
                        </div>
                        <div class="col-3">
                            &nbsp;
                        </div>
                    </div>
                    <table class="table table-bordered table-hover table-striped table-light" id="scheduleTable" style="display:none">
                        <tr class="bg-secondary" style="text-align:center">
                            <th scope="col" width="5%">
                                ID
                            </th>
                            <th scope="col" width="65%">
                                Место
                            </th>
                            <th scope="col" width="30%">
                                Запуск
                            </th>
                        </tr>
                        <tbody id="SetScheduleList"></tbody>
                    </table>
                    <div class="row repeat_access">
                        <div class="col-3">
                            <label class="text-warning h6">Доступы:</label>
                        </div>
                        <div class="col-9">
                            <select class="custom-select form-control" id="repeat_access_type" name="repeat_access_type">
                                <option value="0">Для всех</option>
                                <option value="1">Из настроек отчета</option>
                                <option value="2">Выбранные пользователи</option>
                            </select>
                        </div>
                    </div>
                    <div class="row mt-2 repeat_access" id="repeat_access_area" style="display:none">
                        <div class="col-3">
                            <label class="text-warning h6">Пользователи:</label>
                        </div>
                        <div class="col-6">
                            @Html.DropDownList("repeat_access_users", (SelectList)ViewBag.Wish_users, new { @class = "form-control chosen-select chosen-select-users", @multiple = "true" })
                        </div>
                        <div class="col-3 input-group">
                            <input value="Все" class="btn btn-outline-info mr-4" type="button" onclick="AddUsersInRepeatSelect(0)">
                            <input value="Очистить" class="btn btn-outline-danger" type="button" onclick="AddUsersInRepeatSelect(-1)">
                        </div>
                    </div>
                    <div class="row mt-2">
                        <div class="col-4">
                            <input value="Заказать отчет" class="btn btn-success" type="submit" onclick="CreateRepeatWish()">
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

    @section scripts {
        <script>
            $(".chosen-select").chosen({
                width: '100%',
                placeholder_text_multiple: "Не выбрано",
                no_results_text: "Ничего не найдено",
                search_contains: true,
                display_disabled_options: false,
                display_selected_options: false,
                max_shown_results: Infinity
            });

            $(".chosen-choices").css('font-size', '16px');
            $(".chosen-choices").css('min-height', '38px');

            function sleep(ms) {
                return new Promise(resolve => setTimeout(resolve, ms));
            }

            function CreateRepeatWish() {
                if ($('#busy_page').val() == "false") {
                    $('#busy_page').val("true");

                    //Проверка всех данных перед отправкой
                    var deadlineValue;
                    var attemptsCount;
                    var WishId = $('#wish_id').val();
                    var parameters = [];
                    var places = [];
                    try {
                        //----------Дедлайн---------------
                        var deadline = document.getElementById('deadlineValue');
                        deadlineValue = deadline.value;

                        if ((deadline.validity.badInput) || (deadlineValue.length === 0)) {
                            $('#busy_page').val("false");
                            alert("Ошибка! Проверьте дату и время дедлайна.");
                            return false;
                        }

                        //----------Попытки---------------
                        var attempts = document.getElementById('attemptsValue');
                        if (attempts.value == '')
                            attemptsCount = null
                        else
                            attemptsCount = attempts.value;

                        //----------Параметры-------------

                        if (!checkParameters()) {
                            $('#busy_page').val("false");
                            return false;
                        }

                        var ParamTable = document.getElementById('SetParameterList');
                        if (ParamTable.rows[0].cells.length > 1) {
                            parameters = $('#SetParameterList tr').map(function (i, row) {
                                return {
                                    'name': row.className.replace('row_', ''),
                                    'value': row.cells[2].childNodes[0].value
                                }
                            }).get();
                        }

                        //----------Места-----------------
                        if ($('#scheduleTable tr > td:contains(Ничего не найдено)').length != 0) {
                            $('#busy_page').val("false");
                            alert("Нет ни одного выбранного места! Задание невозможно повторить.");
                            return false;
                        }

                        var checkBox = document.getElementById('customSwitch');
                        if (checkBox.checked) {
                            var startDate = document.getElementById('startdateValue');
                            var startdateValue = startDate.value;

                            if ((startDate.validity.badInput) || (startdateValue.length === 0)) {
                                $('#busy_page').val("false");
                                alert("Ошибка! Проверьте дату и время запуска.");
                                return false;
                            }
                            places = $('#SetScheduleList tr').map(function (i, row) {
                                return {
                                    'id': row.cells[0].textContent,
                                    'startdate': startdateValue
                                }
                            }).get();
                        }
                        else {
                            places = $('#SetScheduleList tr').map(function (i, row) {
                                return {
                                    'id': row.cells[0].textContent,
                                    'startdate': row.cells[2].childNodes[0].value
                                }
                            }).get();
                        }
                    }
                    catch
                    {
                        $('#busy_page').val("false");
                        alert("Ошибка при проверке данных! Проверьте данные по вкладкам.");
                        return false;
                    }

                    var data = 'wish_id=' + WishId.toString();

                    var repeat_type = document.getElementById('repeat_type');
                    data += '&repeat_type=' + repeat_type.value;

                    data += '&user_id=' + $('#current_user_id').val();

                    data += '&deadlineValue=' + deadlineValue;

                    if (attemptsCount == null)
                        data += '&attemptsCount=null'
                    else
                        data += '&attemptsCount=' + attemptsCount.toString();

                    data += '&parameters=' + JSON.stringify(parameters)

                    data += '&places=' + JSON.stringify(places)

                    var access_type = document.getElementById('repeat_access_type');

                    switch (access_type.value) {
                        case '0':
                            data += '&access_user=0';
                            break
                        case '1':
                            data += '&access_user=-1';
                            break;
                        case '2':
                            var user_id = $("#repeat_access_users").val();
                            $.each(user_id, function (index, value) {
                                if (value != $('#current_user_id').val())
                                    data += '&access_user=' + value.toString();
                            });
                            data += '&access_user=' + $('#current_user_id').val();
                            break;
                    }
                    $('#busy_page').val("false");
                    $.ajax({
                        type: "Post",
                        data: data,
                        url: mainURL + "/Wish/RepeatWish",
                        success: function (result) {
                            $('#busy_page').val("false");

                            if (result == -1) {
                                alert("Произошла ошибка при сохранении данных! Задание не повторено!");
                                return false;
                            }

                            if (repeat_type.value == '0') {
                                alert("Задание обновлено")
                            }
                            else {
                                alert("Новое задание добавлено");
                            }

                            $("#repeat_tasks").modal('hide');
                            GetTasks(result, $('#current_user_id').val());
                        },
                        error: function (xhr, status, p3) {
                            $('#busy_page').val("false");
                            alert(xhr.responseText);
                        }
                    })
                }
            }

            function checkParameters() {
                var no_param = $('#row_0');

                //Есть параметры
                if (no_param.length == 0) {
                    var flag = true;
                    $('input.parameterValue').each(function () {
                        switch ($(this).attr('type')) {
                            case 'text':
                                var value = $(this).val().replace(/ +/g, '');
                                if (value.length === 0) {
                                    flag = false;
                                }
                                break;
                            case 'number':
                                var value = $(this).val();
                                if ((this.validity.badInput) || (value.length === 0)) {
                                    flag = false;
                                }
                                break;
                            case 'datetime-local':
                                var value = $(this).val();
                                if ((this.validity.badInput) || (value.length === 0)) {
                                    flag = false;
                                }
                                break;
                        }
                        if (!flag)
                            return false;
                    });

                    if (!flag) {
                        alert("Ошибка! Проверьте введенные значения параметров.");
                        return false;
                    }
                }
                return true;
            }

            function RepeatWish() {
                if ($('#busy_page').val() == "false") {
                    $('#busy_page').val("true");

                    var UserId = $("#user_id").val();

                    if (UserId != 0) {
                        if (($('#current_user_id').val() != UserId) && ($('#current_user_id').val() != 1) && ($('#current_user_id').val() != 2)) {
                            $('#busy_page').val("false");
                            return false;
                        }
                    }
                    else {
                        $('#busy_page').val("false");
                        return false;
                    }

                    var WishId = $('#wish_id').val();

                    $("#found_tasks").modal('hide');
                    $("#repeat_tasks").modal();

                    $("#repeat_type").val(0);
                    SelectRepeatType();

                    var checkBox = document.getElementById('customCheck');
                    checkBox.checked = true;

                    var customSwitch = document.getElementById('customSwitch');
                    customSwitch.checked = true;
                    ChangeCustomSwitch();


                    fillParameterList(WishId);
                    fillstartdateValue();

                    ChangeCustomCheck();

                    GetWishUserId(WishId);

                    $('#busy_page').val("false");
                }
            }

            function GetRepeatAccessUsers(WishId) {
                var url = mainURL + "/Monitor/GetAccessUsers?WishId=" + WishId;
                $.ajax({
                    type: "GET",
                    url: url,
                    success: function (UserList) {
                        $("#repeat_access_users").val(UserList).trigger('chosen:updated');
                    }
                })   
            }

            function AddUsersInRepeatSelect(ReportTypeId) {
                switch (ReportTypeId) {
                    case -1:
                        var url = mainURL + "/Report/GetUsersByReportTypeId?ReportTypeId=-1";
                        break;
                    case 0:
                        var url = mainURL + "/Report/GetUsersByReportTypeId?ReportTypeId=0";
                        break;
                    default:
                        var url = mainURL + "/Report/GetUsersByReportTypeId?ReportTypeId=" + ReportTypeId;
                        break;
                }

                $.ajax({
                    type: "GET",
                    url: url,
                    success: function (UserList) {
                        $("#repeat_access_users").val(UserList).trigger('chosen:updated');
                    }
                });
            }

            function GetWishUserId(WishId) {
                var url = mainURL + "/Monitor/GetAccess?WishId=" + WishId;
                $.ajax({
                    type: "GET",
                    url: url,
                    success: function (result) {
                        if (result == -1) {
                            return false;
                        }

                        $("#repeat_access_type").val("");
                        if (result != null) {
                            $("#repeat_access_type").val(result);
                            SelectRepeatAccessType();
                            GetRepeatAccessUsers(WishId);
                        }
                    }
                })
    }

            function ChangeCustomCheck() {
                var WishId = $('#wish_id').val();
                var checkBox = document.getElementById('customCheck');
                var url = mainURL + "/Monitor/GetTasks?WishId=" + WishId + "&OnlyFail=" + checkBox.checked;
                $.ajax({
                    type: "GET",
                    url: url,
                    success: function (TaskList) {
                        var SetData = $("#SetScheduleList");
                        SetData.empty();

                        if (TaskList.length == 0) {
                            var Data = "<tr class='font-italic font-weight-light'> <td colspan='3'>Ничего не найдено</td></tr>";
                            SetData.append(Data);
                        }
                        else {
                            var arr1 = [];

                            for (var i = 0; i < TaskList.length; i++) {
                                arr1.push({ 'id': TaskList[i].Task_place_id, 'name': TaskList[i].Task_place_name, 'startDate': "" });
                            }

                            var arr2 = $('#SetScheduleList tr').map(function (i, row) {
                                return {
                                    'id': row.cells[0].textContent,
                                    'name': row.cells[1].textContent,
                                    'startDate': row.cells[2].childNodes[0].value
                                }
                            }).get();
                        }

                        var now = new Date(); 
                        var startDate = now.getFullYear() + "-" + ("0" + (now.getMonth() + 1)).slice(-2) + "-" + ("0" + now.getDate()).slice(-2) + "T00:00";

                        var SetData = $("#SetScheduleList");
                        SetData.empty();
                        if (TaskList.length == 0) {
                            var Data = "<tr class='font-italic font-weight-light'> <td colspan='3'>Ничего не найдено</td></tr>";
                            SetData.append(Data);
                        }
                        else {
                            for (var i = 0; i < TaskList.length; i++) {
                                var Data = "<tr><td>" + TaskList[i].Task_place_id + "</td><td>" + TaskList[i].Task_place_name + "</td>";
                                Data += "<td><input type='datetime-local' class='startDatePlace' value='" + startDate + "' required></td></tr>";
                                SetData.append(Data);
                            }
                        }
                    }
                });
            }

            $("#customCheck").change(function () {
                ChangeCustomCheck();
            });

            function CheckStartDateForAll() {
                var startDate = document.getElementById('startdateValue');
                var value = startDate.value;

                if ((startDate.validity.badInput) || (value.length === 0)) {
                    alert("Ошибка! Сначала установите дату и время запуска.");
                    return false;
                }

                return true;
            }
            
            function SetStartDateForAll() {
                if (!CheckStartDateForAll())
                    return false;

                var startDate = document.getElementById('startdateValue');
                var value = startDate.value;

                var arr1 = $('#SetScheduleList tr').map(function (i, row) {
                    return {
                        'id': row.cells[0].textContent,
                        'name': row.cells[1].textContent,
                        'startDate': value
                    }
                }).get();

                var SetData = $("#SetScheduleList");
                SetData.empty();
                for (var i = 0; i < arr1.length; i++) {
                    var Data = "<tr><td>" + arr1[i].id + "</td><td>" + arr1[i].name + "</td>";
                    Data += "<td><input type='datetime-local' class='startDatePlace' value='" + arr1[i].startDate + "' required></td></tr>";
                    SetData.append(Data);
                }
            }

            $("#repeat_tasks").on("hidden.bs.modal", function () {
                if (!$('#found_tasks').hasClass('show'))
                    $("#found_tasks").modal('show');
            });

            $("#repeat_tasks").on("shown.bs.modal", function () {
                $(document.body).addClass("modal-open");
            });

            $("#repeat_type").change(function () {
                SelectRepeatType();
            });

            function SelectRepeatType() {
                if ($('#repeat_type').val() == 0)
                    $(".repeat").addClass("disabledaction");
                else
                    $(".repeat").removeClass("disabledaction");
            };

            function ChangeCustomSwitch() {
                var checkBox = document.getElementById('customSwitch');
                var startDate = document.getElementById('startdateValue');
                var scheduleTable = document.getElementById('scheduleTable');
                var startDateButton = document.getElementById('startdateButton');
                if (checkBox.checked) {
                    startDate.style.display = 'block';
                    startDateButton.style.display = 'block';
                    scheduleTable.style.display = 'none';
                }
                else {
                    startDate.style.display = 'none';
                    startDateButton.style.display = 'none';
                    scheduleTable.style.display = '';
                }
            }

            $("#customSwitch").change(function () {
                ChangeCustomSwitch();
            });

            function fillParameterList(WishId) {
                var url = mainURL + "/Monitor/GetParameters?WishId=" + WishId;

                $.ajax({
                    type: "GET",
                    url: url,
                    success: function (ParameterList) {
                        var SetData = $("#SetParameterList");
                        SetData.empty();
                        if (ParameterList.length == 0) {
                            var Data = "<tr class='row_0'> <td colspan='3'>Параметров нет.</td></tr>";
                            SetData.append(Data);
                        }
                        else {
                            for (var i = 0; i < ParameterList.length; i++) {
                                if ((ParameterList[i].Type != "deadline") && (ParameterList[i].Type != "attempts")) {
                                    var Data = "<tr class='row_" + ParameterList[i].Name + "'>" +
                                        "<td>" + ParameterList[i].Alias + "</td>" +
                                        "<td>" + ParameterList[i].Type + "</td>";
                                    switch (ParameterList[i].Type) {
                                        case 'string':
                                            Data += "<td><input type='text' class='parameterValue' placeholder='Введите значение' value='" + ParameterList[i].Value + "' required></td>";
                                            break;
                                        case 'integer':
                                            Data += "<td><input type='number' class='parameterValue' value'" + ParameterList[i].Value + "' required></td>";
                                            break;
                                        case 'startdate':
                                            var now = ParameterList[i].Value.split(/\.|\s|\:/);
                                            Data += "<td><input type='datetime-local' class='parameterValue' value='" + now[2] + "-" + now[1] + "-" + now[0] + "T" + ("0" + now[3]).slice(-2) + ":" + now[4] + "' required></td>";
                                            break;
                                        case 'enddate':
                                            var now = ParameterList[i].Value.split(/\.|\s|\:/);
                                            Data += "<td><input type='datetime-local' class='parameterValue' value='" + now[2] + "-" + now[1] + "-" + now[0] + "T" + ("0" + now[3]).slice(-2) + ":" + now[4] + "' required></td>";
                                            break;
                                    }

                                    Data += "</tr>";
                                    SetData.append(Data);
                                }
                            }
                        }
                    }
                })
            }

            function fillstartdateValue() {
                var now = new Date();
                var startDate = document.getElementById('startdateValue');
                startDate.value = now.getFullYear() + "-" + ("0" + (now.getMonth() + 1)).slice(-2) + "-" + ("0" + now.getDate()).slice(-2) + "T00:00";

                var deadlineDate = document.getElementById('deadlineValue');
                now.setDate(now.getDate() + 1);
                deadlineDate.value = now.getFullYear() + "-" + ("0" + (now.getMonth() + 1)).slice(-2) + "-" + ("0" + now.getDate()).slice(-2) + "T00:00";
            }

            function fillReportTypeList(user_id) {
                var url = mainURL + "/Wish/GetReportTypes?UserId=" + user_id;

                $.ajax({
                    type: "GET",
                    url: url,
                    success: function (ReportTypeList) {
                        var SetData = $("#search_report_type_id");
                        SetData.empty();
                        var emptyReportType = $("<option value>Не выбрано</option>");
                        SetData.append(emptyReportType);
                        for (var i = 0; i < ReportTypeList.length; i++) {
                            if ($("#search_report_type_id optgroup[label='" + ReportTypeList[i].report_group_name + "']").html() == null) {
                                SetData.append("<optgroup label='" + ReportTypeList[i].report_group_name + "'></optgroup>");
                            }

                            var $optionGroup = SetData.find("optgroup[label='" + ReportTypeList[i].report_group_name + "']");

                            $optionGroup.append("<option value='" + ReportTypeList[i].report_type_id + "'>" + ReportTypeList[i].report_type_name + "</option>");
                        }
                    }
                })
            }

            function SetAccess() {
                if ($('#busy_page').val() == "false") {
                    $('#busy_page').val("true");

                    var access_type = $("#access_type").val();

                    var wish_id = $("#wish_id").val();

                    if ((wish_id == null) || (wish_id == 0) || (access_type == null)) {
                        alert("Произошла ошибка при сохранении доступа к заданию");
                        return false;
                    }

                    var user_id = $("#access_users").val();

                    var data = "wish_id=" + wish_id;
                    data += "&access_type=" + access_type;

                    $.each(user_id, function (index, value) {
                        data += '&access_user=' + value.toString();
                    });

                    data += '&access_user=' + $('#current_user_id').val();

                    $.ajax({
                        type: "Post",
                        data: data,
                        url: mainURL + "/Monitor/SetAccess",
                        success: function (result) {
                            $('#busy_page').val("false");

                            if (result == 1) {
                                alert("Ошибка! Не найдена связка задания с доступами");
                                return false;
                            }

                            alert("Доступы успешно изменены");
                            UpdateInfo();
                        },
                        error: function (xhr, status, p3) {
                            $('#busy_page').val("false");
                            alert(xhr.responseText);
                        }
                    })
                }
                return false;
            }

            function UpdateInfo() {
                GetTasks($("#wish_id").val(), $("#user_id").val());
            }

            function GetExcel(TaskId) {
                if ($('#busy_page').val() == "false") {
                    $('#busy_page').val("true");

                    var wish_id = $("#wish_id").val();

                    if ((wish_id == null) || (wish_id == 0)) {
                        alert("Непредвиденная ошибка! Выгрузка файла невозможна.");
                        return false;
                    }

                    var data = new FormData();

                    data.append("wish_id", wish_id);
                    data.append("task_id", TaskId);

                    $.ajax({
                        type: "Post",
                        data: data,
                        contentType: false,
                        processData: false,
                        url: mainURL + "/Monitor/CreateExcel",
                        success: function (Guid) {
                            $('#busy_page').val("false");

                            var pattern = /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i;

                            if (pattern.test(Guid) !== true) {
                                alert("Непредвиденная ошибка! Выгрузка файла невозможна.");
                                return false;
                            }

                            window.location.href = mainURL + "/Monitor/GetFile?path=" + Guid;
                        },
                        error: function (xhr, status, p3) {
                            $('#busy_page').val("false");
                            alert(xhr.responseText);
                        }
                    })
                }
                return false;
            }

            function EndWish() {
                if ($('#busy_page').val() == "false") {
                    $('#busy_page').val("true");

                    var wish_id = $("#wish_id").val();

                    if ((wish_id == null) || (wish_id == 0)) {
                        alert("Непредвиденная ошибка!");
                        return false;
                    }

                    var data = new FormData();

                    data.append("wish_id", wish_id);

                    $.ajax({
                        type: "Post",
                        data: data,
                        contentType: false,
                        processData: false,
                        url: mainURL + "/Monitor/EndWish",
                        success: function (result) {
                            $('#busy_page').val("false");
                            sleep(3000).then(() => UpdateInfo());
                        },
                        error: function (xhr, status, p3) {
                            $('#busy_page').val("false");
                            alert(xhr.responseText);
                        }
                    })
                }
                return false;
            }

            function ForceTask(TaskId) {
                if ($('#busy_page').val() == "false") {
                    $('#busy_page').val("true");

                    var wish_id = $("#wish_id").val();

                    if ((wish_id == null) || (wish_id == 0)) {
                        alert("Непредвиденная ошибка!");
                        return false;
                    }

                    var data = new FormData();

                    data.append("wish_id", wish_id);
                    data.append("task_id", TaskId);

                    $.ajax({
                        type: "Post",
                        data: data,
                        contentType: false,
                        processData: false,
                        url: mainURL + "/Monitor/ForceTask",
                        success: function (result) {
                            $('#busy_page').val("false");

                            if (result == -1) {
                                alert("Непредвиденная ошибка!");
                                return false;
                            }

                            if (result != 0) {
                                var oi;
                                oi = document.getElementById('task' + result);
                                oi.innerHTML = 'в работе';
                            }
                            else {
                                alert("Задание уже завершилось!");
                                return false;
                            }
                        },
                        error: function (xhr, status, p3) {
                            $('#busy_page').val("false");
                            alert(xhr.responseText);
                        }
                    })
                }
                return false;
            }

            function ClickSearch() {
                var data = $("#SubmitForm").serialize();
                localStorage.setItem("search_user_id", $("#search_user_id").val());
                localStorage.setItem("search_report_type_id", $("#search_report_type_id").val());
                localStorage.setItem("search_status", $("#search_status").val());
                localStorage.setItem("search_startdate", $("#search_startdate").val());
                localStorage.setItem("search_enddate", $("#search_enddate").val());
                localStorage.setItem("search_places", $("#search_places").val());

                data += "&search_places=0";

                $.ajax({
                    type: "Post",
                    data: data,
                    url: mainURL + "/Monitor/SearchWishes",
                    success: function (WishList) {
                        var SetData = $("#FoundWishesList");
                        SetData.empty();
                        if (WishList.length == 0) {
                            var Data = "<tr class='font-italic font-weight-light'> <td colspan='4'>Ничего не найдено</td></tr>";
                            SetData.append(Data);
                        }
                        else {
                            for (var i = 0; i < WishList.length; i++) {
                                var Data = "<tr onclick='GetTasks(" + WishList[i].Wish_id + ", " + WishList[i].User_id + ")'>" +
                                    "<td style='text-align: center;'>" + timeConverter(WishList[i].Wish_createdate) + "</td>" +
                                    "<td>" + WishList[i].Wish_report_type_name + "</td>" +
                                    "<td style='text-align: center;'>" + WishList[i].User_name + "</td>" +
                                    "<td style='text-align: center;'>" + WishList[i].Wish_status + "</td>";

                                Data += "</tr>";
                                SetData.append(Data);
                            }
                        }
                    }
                })
            }

            function GetParamValue(WishId) {
                var url = mainURL + "/Monitor/GetParameters?WishId=" + WishId;
                    $.ajax({
                    type: "GET",
                    url: url,
                    success: function (ParamList) {
                        var SetParam = $("#labelParameterReport");
                        SetParam.empty();

                        $("#labelDeadlineReport").empty();
                        $("#labelDeadlineReport").text("-");

                        $("#labelAttemptsReport").empty();
                        $("#labelAttemptsReport").text("-");

                        var ParamData = "";

                        if (ParamList.length != 0) {
                            for (var i = 0; i < ParamList.length; i++) {
                                switch (ParamList[i].Type) {
                                    case "deadline":
                                        $("#labelDeadlineReport").text(ParamList[i].Value);
                                        break;
                                    case "attempts":
                                        if (ParamList[i].Value == '')
                                            $("#labelAttemptsReport").text('-')
                                        else
                                            $("#labelAttemptsReport").text(ParamList[i].Value);
                                        break;
                                    default:
                                        ParamData += ParamList[i].Alias + " = " + ParamList[i].Value + '<br>';;
                                }
                            }
                        }
                        SetParam.append(ParamData);
                    }
                })
            }

            function GetAccess(WishId) {
                var url = mainURL + "/Monitor/GetAccess?WishId=" + WishId;
                $.ajax({
                    type: "GET",
                    url: url,
                    success: function (result) {
                        if (result == -1) {
                            return false;
                        }

                        $("#access_type").val("");
                        if (result != null) {
                            $("#access_type").val(result);
                            SelectAccessType();
                            GetAccessUsers(WishId);
                        }
                    }
                })
            }

            $("#access_type").change(function () {
                SelectAccessType();
            });

            function SelectAccessType() {
                var access_area = document.getElementById('access_area');
                if ($("#access_type").val() != 2) {
                    access_area.style.display = 'none';
                }
                else {
                    access_area.style.display = '';
                }
            }

            $("#repeat_access_type").change(function () {
                SelectRepeatAccessType();
            });

            function SelectRepeatAccessType() {
                var repeat_access_area = document.getElementById('repeat_access_area');
                if ($("#repeat_access_type").val() != 2) {
                    repeat_access_area.style.display = 'none';
                }
                else {
                    repeat_access_area.style.display = '';
                }
            }

            function GetAccessUsers(WishId) {
                var url = mainURL + "/Monitor/GetAccessUsers?WishId=" + WishId;
                $.ajax({
                    type: "GET",
                    url: url,
                    success: function (UserList) {
                        $("#access_users").val(UserList).trigger('chosen:updated');
                    }
                })   
            }

            function AddUsersInSelect(ReportTypeId) {
                switch (ReportTypeId) {
                    case -1:
                        var url = mainURL + "/Report/GetUsersByReportTypeId?ReportTypeId=-1";
                        break;
                    case 0:
                        var url = mainURL + "/Report/GetUsersByReportTypeId?ReportTypeId=0";
                        break;
                    default:
                        var url = mainURL + "/Report/GetUsersByReportTypeId?ReportTypeId=" + ReportTypeId;
                        break;
                }

                $.ajax({
                    type: "GET",
                    url: url,
                    success: function (UserList) {
                        $("#access_users").val(UserList).trigger('chosen:updated');
                    }
                });
            }

            function GetTasks(WishId, UserId) {
                if ($('#busy_page').val() == "false") {
                    $('#busy_page').val("true");

                    if (UserId != 0) {
                        if (($('#current_user_id').val() != UserId) && ($('#current_user_id').val() != 1) && ($('#current_user_id').val() != 2))
                            $(".access").addClass("disabledaction");
                        else
                            $(".access").removeClass("disabledaction");
                    }

                    var url = mainURL + "/Monitor/GetTasks?WishId=" + WishId + "&OnlyFail=false";
                    $("#found_tasks").modal();
                    $.ajax({
                        type: "GET",
                        url: url,
                        success: function (TaskList) {
                            $('#busy_page').val("false");
                            GetParamValue(WishId);
                            GetAccess(WishId);
                            var GetExcelButton = document.getElementById('GetExcelButton');
                            if (TaskList.some(item => item.Task_status === 'завершено')) {
                                GetExcelButton.style.display = '';
                            }
                            else {
                                GetExcelButton.style.display = 'none';
                            }

                            var EndButton = document.getElementById('EndButton');
                            var RepeatButton = document.getElementById('RepeatButton');

                            if (UserId != 0) {
                                if (($('#current_user_id').val() != UserId) && ($('#current_user_id').val() != 1) && ($('#current_user_id').val() != 2)) {
                                    EndButton.style.display = 'none';
                                    RepeatButton.style.display = 'none';
                                }
                                else {
                                    if (TaskList.some(item => item.Task_status !== 'завершено' && item.Task_status !== 'завершено с ошибкой')) {
                                        EndButton.style.display = '';
                                        RepeatButton.style.display = 'none';
                                    }
                                    else {
                                        EndButton.style.display = 'none';
                                        RepeatButton.style.display = '';
                                    }
                                }
                            }

                            $('#wish_id').val(WishId);
                            $('#user_id').val(UserId);

                            //Места
                            var SetData = $("#FoundTasksList");
                            SetData.empty();
                            if (TaskList.length == 0) {
                                var Data = "<tr class='font-italic font-weight-light'> <td colspan='5'>Ничего не найдено</td></tr>";
                                SetData.append(Data);
                            }
                            else {
                                for (var i = 0; i < TaskList.length; i++) {
                                    var Data = "<tr>" +
                                        "<td>" + TaskList[i].Task_place_name + "</td>" +
                                        "<td style='text-align: center;'>" + timeConverter(TaskList[i].Task_startdate) + "</td>";
                                    if (TaskList[i].Task_number_attempts != null) {
                                        Data += "<td style='text-align: center;'>" + TaskList[i].Task_number_attempts + "</td>";
                                    }
                                    else {
                                        Data += "<td style='text-align: center;'>-</td>";
                                    }

                                    if (TaskList[i].Task_status === "завершено") {
                                        Data += "<td id='task" + TaskList[i].Task_id + "' style='text-align: center;'><a href='#' onclick='GetExcel(" + TaskList[i].Task_id + ")'>" + TaskList[i].Task_status + "</a></td>";
                                    }
                                    else {
                                        if ((TaskList[i].Task_status === "ожидание") || (TaskList[i].Task_status === "завершено с ошибкой")) {
                                            Data += "<td id='task" + TaskList[i].Task_id + "' style='text-align: center;'>" + TaskList[i].Task_status + "<a href='#' onclick='ForceTask(" + TaskList[i].Task_id + ")'> (зафорсить) </a></td>";
                                        }
                                        else {
                                            Data += "<td id='task" + TaskList[i].Task_id + "' style='text-align: center;'>" + TaskList[i].Task_status + "</td>";
                                        }
                                    }

                                    if (TaskList[i].Task_last_error_text != null) {
                                        Data += "<td><a href='#' onclick='alert(&quot;" + TaskList[i].Task_last_error_text + "&quot;)'>" + TaskList[i].Task_last_error_text_short + "</a></td>";
                                    }
                                    else {
                                        Data += "<td style='text-align: justify;'>" + TaskList[i].Task_last_error_text_short + "</td>";
                                    }


                                    Data += "</tr>";
                                    SetData.append(Data);
                                }
                            }
                        },
                        error: function (xhr, status, p3) {
                            $('#busy_page').val("false");
                            alert(xhr.responseText);
                        }
                    })
                }
            }

            function timeConverter(UNIX_timestamp) {
                var a = new Date(UNIX_timestamp.replace(/\D+/g, '') * 1);
                var year = a.getFullYear();
                var month = ('0' + (a.getMonth() + 1)).slice(-2);
                var date = ('0' + a.getDate()).slice(-2);
                var hour = ('0' + a.getHours()).slice(-2);
                var min = ('0' + a.getMinutes()).slice(-2);
                var time = date + '.' + month + '.' + year + ' ' + hour + ':' + min;
                return time;
            }

            function ClearSearch() {
                localStorage.setItem("search_user_id", "");
                localStorage.setItem("search_report_type_id", "");
                localStorage.setItem("search_status", "");
                localStorage.setItem("search_startdate", "");
                localStorage.setItem("search_enddate", "");
                localStorage.setItem("search_places", "");
                $('#search_user_id').val("");
                $('#search_report_type_id').val("");
                $('#search_status').val("");
                $('#search_startdate').val("");
                $('#search_enddate').val("");
                $(".chosen-select").val("").trigger('chosen:updated');
                ClickSearch();
            }

            window.onload = function () {
                $('#busy_page').val("false");

                var user_id = $('#current_user_id').val();
                fillReportTypeList(user_id);

                var search_user_id = localStorage.getItem("search_user_id");
                var search_report_type_id = localStorage.getItem("search_report_type_id");
                var search_status = localStorage.getItem("search_status");
                var search_startdate = localStorage.getItem("search_startdate");
                var search_enddate = localStorage.getItem("search_enddate");
                var search_places = localStorage.getItem("search_places");

                if (search_user_id !== null) $('#search_user_id').val(search_user_id);
                if (search_report_type_id !== null) $('#search_report_type_id').val(search_report_type_id);
                if (search_status !== null) $('#search_status').val(search_status);
                if (search_startdate !== null) $('#search_startdate').val(search_startdate);
                if (search_enddate !== null) $('#search_enddate').val(search_enddate);
                if (search_places !== null) $(".chosen-select").val(search_places.split(',')).trigger('chosen:updated');
            }
        </script>
    }
